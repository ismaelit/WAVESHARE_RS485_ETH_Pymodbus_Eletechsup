#!/usr/bin/env python3
"""
Configura√ß√£o da L√≥gica Interna da Placa 25IOB16
Configura mapeamento autom√°tico entrada‚Üísa√≠da diretamente na placa usando registrador oficial

REGISTRADORES CORRIGIDOS:
- Registrador 250 (0x00FA): Controle de l√≥gica interna (baseado na documenta√ß√£o EletechSup)

MODOS SUPORTADOS:
- 0x0000: Desabilitado (sem rela√ß√£o)
- 0x0001: Auto-travamento (self-locking)  
- 0x0002: Intertravamento (todos canais)
- 0x0003: Moment√¢neo
- 0x0004: Intertravamento (2 canais)
- 0x0005: Mapeamento 1:1 (Output = Input)

FUNCIONALIDADES:
- Configura√ß√£o de l√≥gica interna no hardware (sem necessidade de scripts externos)
- Backup/restore de configura√ß√µes  
- Detec√ß√£o autom√°tica do modo atual
- Interface simplificada com todos os modos oficiais
- Testes integrados de funcionamento

AUTOR: Script corrigido com registradores oficiais da documenta√ß√£o EletechSup
"""

from modbus_25iob16_pymodbus import Modbus25IOB16Pymodbus
import time

class ConfiguradorLogicaInterna:
    def __init__(self, ip_modbus, porta=502, unit_id=1):
        self.modbus = Modbus25IOB16Pymodbus(ip_modbus, porta, unit_id)
        self.ip = ip_modbus
        self.porta = porta
        self.unit_id = unit_id
        
        # Registrador oficial de configura√ß√£o da l√≥gica interna (baseado na documenta√ß√£o EletechSup)
        self.REG_LOGICA_INTERNA = 250  # 0x00FA - Controla modos de relacionamento entrada-sa√≠da
        
        # Modos oficiais suportados pelo m√≥dulo 25IOB16
        self.MODOS = {
            'desabilitado': 0x0000,    # Sem rela√ß√£o (padr√£o)
            'auto_travamento': 0x0001, # Self-locking
            'inter_todos': 0x0002,     # Interlocking (todos canais)
            'momentaneo': 0x0003,      # Momentary
            'inter_2canais': 0x0004,   # Interlocking (2 canais)
            'mapeamento_1_1': 0x0005   # Output = Input (mapeamento direto 1:1)
        }
        
    def conectar(self):
        """Estabelece conex√£o com o m√≥dulo"""
        print("üîå Conectando ao m√≥dulo 25IOB16...")
        if self.modbus.connect():
            print("‚úÖ Conectado com sucesso!")
            return True
        else:
            print("‚ùå Falha na conex√£o!")
            return False
    
    def desconectar(self):
        """Fecha conex√£o com o m√≥dulo"""
        if self.modbus.client and self.modbus.client.connected:
            self.modbus.disconnect()
            print("üîå Conex√£o fechada")
    
    def ler_modo_atual(self):
        """L√™ o modo de l√≥gica interna atual do m√≥dulo"""
        try:
            result = self.modbus.client.read_holding_registers(self.REG_LOGICA_INTERNA, count=1, device_id=self.modbus.unit_id)
            if not result.isError():
                modo_valor = result.registers[0]
                
                # Converte valor num√©rico para nome do modo
                for nome, valor in self.MODOS.items():
                    if valor == modo_valor:
                        return nome, modo_valor
                
                return 'desconhecido', modo_valor
            else:
                print(f"‚ùå Erro ao ler modo atual: {result}")
                return None, None
        except Exception as e:
            print(f"‚ùå Exce√ß√£o ao ler modo atual: {e}")
            return None, None
    
    def configurar_modo(self, modo_nome):
        """Configura o modo de l√≥gica interna do m√≥dulo"""
        if modo_nome not in self.MODOS:
            print(f"‚ùå Modo '{modo_nome}' n√£o suportado!")
            print(f"   Modos dispon√≠veis: {list(self.MODOS.keys())}")
            return False
            
        try:
            modo_valor = self.MODOS[modo_nome]
            result = self.modbus.client.write_register(self.REG_LOGICA_INTERNA, modo_valor, device_id=self.modbus.unit_id)
            if not result.isError():
                return True
            else:
                print(f"‚ùå Erro ao configurar modo '{modo_nome}': {result}")
                return False
        except Exception as e:
            print(f"‚ùå Exce√ß√£o ao configurar modo '{modo_nome}': {e}")
            return False
    
    def ativar_mapeamento_1_para_1(self):
        """Ativa mapeamento 1:1 usando o modo oficial do m√≥dulo"""
        print("\nüîß Ativando Mapeamento 1:1 (Entrada N ‚Üí Sa√≠da N)...")
        print("   ‚Ä¢ Usando modo oficial do hardware: 'mapeamento_1_1'")
        print("   ‚Ä¢ Sem necessidade de script externo!")
        
        if self.configurar_modo('mapeamento_1_1'):
            print("   ‚úÖ Mapeamento autom√°tico 1:1 ATIVADO no hardware!")
            print("   ‚ÑπÔ∏è O m√≥dulo agora funciona independentemente de software")
            return True
        else:
            print("   ‚ùå Falha ao ativar mapeamento 1:1")
            return False
    
    def listar_modos_disponiveis(self):
        """Lista todos os modos de l√≥gica interna dispon√≠veis"""
        print("\nüìù MODOS DE L√ìGICA INTERNA DISPON√çVEIS:")
        
        descricoes = {
            'desabilitado': 'Sem rela√ß√£o entre entradas e sa√≠das (controle manual)',
            'auto_travamento': 'Entrada ativa trava a sa√≠da correspondente (self-locking)',
            'inter_todos': 'Entradas controlam sa√≠das com intertravamento global',
            'momentaneo': 'Sa√≠das ativas apenas enquanto entradas estiverem ativas',
            'inter_2canais': 'Intertravamento entre pares de canais',
            'mapeamento_1_1': 'Mapeamento direto 1:1 - Entrada N controla Sa√≠da N'
        }
        
        for i, (modo, valor) in enumerate(self.MODOS.items(), 1):
            descricao = descricoes.get(modo, 'Descri√ß√£o n√£o dispon√≠vel')
            print(f"   {i}. {modo.upper().replace('_', ' ')}") 
            print(f"      ‚Ä¢ Valor: 0x{valor:04X}")
            print(f"      ‚Ä¢ {descricao}")
            print()
    
    def verificar_configuracao_atual(self):
        """Verifica o modo atual de l√≥gica interna do m√≥dulo"""
        print("\nüîç Verificando Configura√ß√£o Atual...")
        
        modo_nome, modo_valor = self.ler_modo_atual()
        
        if modo_nome is None:
            print("   ‚ùå N√£o foi poss√≠vel ler a configura√ß√£o atual")
            return
            
        print(f"   ‚Ä¢ Modo ativo: {modo_nome.upper().replace('_', ' ')}")
        print(f"   ‚Ä¢ Valor do registrador: 0x{modo_valor:04X} ({modo_valor})")
        print(f"   ‚Ä¢ Registrador usado: {self.REG_LOGICA_INTERNA} (0x{self.REG_LOGICA_INTERNA:02X})")
        
        # Explica√ß√£o do modo atual
        explicacoes = {
            'desabilitado': 'L√≥gica interna desativada - controle manual das sa√≠das',
            'auto_travamento': 'Entradas travam as sa√≠das correspondentes',
            'inter_todos': 'Sistema de intertravamento ativo em todos canais',
            'momentaneo': 'Sa√≠das ativas apenas com entradas ativas',
            'inter_2canais': 'Intertravamento por pares de canais',
            'mapeamento_1_1': 'MAPEAMENTO AUTOM√ÅTICO 1:1 ATIVO - Hardware controla as sa√≠das',
            'desconhecido': 'Modo n√£o reconhecido - verifique o valor'
        }
        
        explicacao = explicacoes.get(modo_nome, 'Modo n√£o documentado')
        print(f"   ‚ÑπÔ∏è Status: {explicacao}")
    
    def desativar_logica_interna(self):
        """Desativa a l√≥gica interna (volta ao modo manual)"""
        print("\nüõë Desativando L√≥gica Interna...")
        print("   ‚Ä¢ Retornando ao modo manual (sem rela√ß√£o)")
        
        if self.configurar_modo('desabilitado'):
            print("   ‚úÖ L√≥gica interna DESATIVADA")
            print("   ‚ÑπÔ∏è Sa√≠das agora devem ser controladas manualmente")
            return True
        else:
            print("   ‚ùå Falha ao desativar l√≥gica interna")
            return False
    
    def testar_logica_interna(self):
        """Testa se a l√≥gica interna est√° funcionando corretamente"""
        print("\nüß™ Testando L√≥gica Interna...")
        
        # Verifica modo atual
        modo_atual, _ = self.ler_modo_atual()
        if modo_atual is None:
            print("   ‚ùå N√£o foi poss√≠vel verificar o modo atual")
            return
            
        print(f"   ‚Ä¢ Modo ativo: {modo_atual.upper().replace('_', ' ')}")
        
        if modo_atual == 'desabilitado':
            print("   ‚ö†Ô∏è  L√≥gica interna desabilitada - ative um modo primeiro")
            return
            
        print("   ‚Ä¢ Instruc√µes para teste:")
        
        if modo_atual == 'mapeamento_1_1':
            print("     1. Ative uma entrada fisicamente")
            print("     2. A sa√≠da correspondente deve ligar automaticamente")
            print("     3. Desative a entrada - a sa√≠da deve desligar")
        elif modo_atual == 'momentaneo':
            print("     1. Mantenha uma entrada ativada")
            print("     2. Sa√≠da deve ficar ativa enquanto entrada estiver ativa")
            print("     3. Solte a entrada - sa√≠da deve desativar imediatamente")
        else:
            print(f"     1. Teste apropriado para modo '{modo_atual}'")
            print("     2. Consulte manual para detalhes do comportamento")
            
        print("\n   ‚Ä¢ Pressione Enter para verificar estados atuais...")
        input()
        
        # L√™ e mostra estados atuais
        entradas = self.modbus.le_status_entradas()
        saidas_digitais = self.modbus.le_status_saidas_digitais()
        
        if entradas is not None and saidas_digitais is not None:
            print(f"\n   üì° ESTADOS ATUAIS:")
            
            entradas_ativas = [i+1 for i, x in enumerate(entradas) if x]
            saidas_ativas = [i+1 for i, x in enumerate(saidas_digitais) if x]
            
            print(f"   ‚Ä¢ Entradas ativas: {entradas_ativas if entradas_ativas else 'Nenhuma'}")
            print(f"   ‚Ä¢ Sa√≠das ativas: {saidas_ativas if saidas_ativas else 'Nenhuma'}")
            
            if modo_atual == 'mapeamento_1_1':
                correspondencias = sum(1 for i in range(16) if entradas[i] == saidas_digitais[i])
                print(f"   ‚Ä¢ Correspond√™ncias 1:1: {correspondencias}/16")
                
                if correspondencias == 16:
                    print("   ‚úÖ Mapeamento 1:1 funcionando perfeitamente!")
                elif correspondencias > 12:
                    print("   ‚úÖ Mapeamento funcionando bem")
                else:
                    print("   ‚ö†Ô∏è  Verifique se o modo est√° configurado corretamente")
        else:
            print("   ‚ùå Erro ao ler estados das entradas/sa√≠das")
    
    def backup_configuracao(self):
        """Faz backup da configura√ß√£o atual"""
        import time
        
        print("\nüíæ Fazendo Backup da Configura√ß√£o...")
        
        modo_atual, modo_valor = self.ler_modo_atual()
        if modo_atual is not None:
            timestamp = time.strftime("%Y%m%d_%H%M%S")
            backup = {
                'timestamp': timestamp,
                'modo': modo_atual,
                'valor': modo_valor,
                'registrador': self.REG_LOGICA_INTERNA,
                'descricao': f"Backup do m√≥dulo 25IOB16 em {time.strftime('%Y-%m-%d %H:%M:%S')}"
            }
            
            filename = f"backup_25iob16_{timestamp}.json"
            try:
                import json
                with open(filename, 'w') as f:
                    json.dump(backup, f, indent=2)
                print(f"   ‚úÖ Backup salvo em: {filename}")
                print(f"   ‚Ä¢ Modo salvo: {modo_atual}")
                print(f"   ‚Ä¢ Valor: 0x{modo_valor:04X}")
                return filename
            except Exception as e:
                print(f"   ‚ùå Erro ao salvar backup: {e}")
                return None
        else:
            print("   ‚ùå N√£o foi poss√≠vel fazer backup - erro ao ler configura√ß√£o atual")
            return None
    
    def restaurar_configuracao(self, arquivo_backup):
        """Restaura configura√ß√£o de um arquivo de backup"""
        print(f"\nüîÑ Restaurando Configura√ß√£o de {arquivo_backup}...")
        
        try:
            import json
            with open(arquivo_backup, 'r') as f:
                backup = json.load(f)
            
            modo = backup['modo']
            valor_original = backup.get('valor', 0)
            
            print(f"   ‚Ä¢ Modo no backup: {modo.upper().replace('_', ' ')}")
            print(f"   ‚Ä¢ Valor original: 0x{valor_original:04X}")
            print(f"   ‚Ä¢ Data do backup: {backup.get('timestamp', 'N/A')}")
            
            if self.configurar_modo(modo):
                print("   ‚úÖ Configura√ß√£o restaurada com sucesso!")
                
                # Verifica se foi aplicado corretamente
                modo_verificacao, valor_verificacao = self.ler_modo_atual()
                if modo_verificacao == modo:
                    print("   ‚úÖ Verifica√ß√£o: Modo aplicado corretamente")
                else:
                    print(f"   ‚ö†Ô∏è  Verifica√ß√£o: Modo atual √© '{modo_verificacao}', esperado '{modo}'")
                
                return True
            else:
                print("   ‚ùå Falha ao restaurar configura√ß√£o")
                return False
                
        except FileNotFoundError:
            print(f"   ‚ùå Arquivo de backup n√£o encontrado: {arquivo_backup}")
            return False
        except json.JSONDecodeError:
            print(f"   ‚ùå Arquivo de backup corrompido ou inv√°lido")
            return False
        except Exception as e:
            print(f"   ‚ùå Erro ao restaurar backup: {e}")
            return False

def main():
    """Fun√ß√£o principal"""
    # CONFIGURA√á√ïES HARDCODED DO AMBIENTE
    ip_modbus = "10.0.2.218"    # IP do gateway WAVESHARE RS485-ETH
    porta_modbus = 502          # Porta padr√£o Modbus TCP
    endereco_modbus = 1         # Endere√ßo do m√≥dulo 25IOB16 (unit_id)
    
    print("=" * 70)
    print("üîß CONFIGURADOR DE L√ìGICA INTERNA - M√ìDULO 25IOB16")
    print("   Configura mapeamento autom√°tico entrada‚Üísa√≠da na placa")
    print(f"   Gateway: {ip_modbus}:{porta_modbus} | M√≥dulo: {endereco_modbus}")
    print("=" * 70)
    
    configurador = ConfiguradorLogicaInterna(ip_modbus, porta_modbus, endereco_modbus)
    
    try:
        if not configurador.conectar():
            return
        
        while True:
            print("\nüìã OP√á√ïES DISPON√çVEIS:")
            print("1. Ativar mapeamento 1:1 (Entrada N ‚Üí Sa√≠da N)")
            print("2. Listar todos os modos dispon√≠veis")
            print("3. Configurar modo espec√≠fico")
            print("4. Verificar configura√ß√£o atual")
            print("5. Testar l√≥gica interna")
            print("6. Desativar l√≥gica interna")
            print("7. Backup da configura√ß√£o")
            print("8. Restaurar configura√ß√£o")
            print("0. Sair")
            
            opcao = input("\nEscolha uma op√ß√£o (0-8): ").strip()
            
            if opcao == "1":
                if configurador.ativar_mapeamento_1_para_1():
                    print("\n‚úÖ Mapeamento 1:1 ativado com sucesso!")
                    print("   üéØ A placa agora funciona independentemente de software!")
                    print("   üìù Cada entrada controla automaticamente sua sa√≠da correspondente")
                else:
                    print("\n‚ùå Falha na ativa√ß√£o do mapeamento 1:1")
            
            elif opcao == "2":
                configurador.listar_modos_disponiveis()
            
            elif opcao == "3":
                print("\nüîß CONFIGURA√á√ÉO DE MODO ESPEC√çFICO")
                print("Modos dispon√≠veis:")
                for i, modo in enumerate(configurador.MODOS.keys(), 1):
                    print(f"   {i}. {modo.replace('_', ' ').title()}")
                
                try:
                    escolha = input("\nDigite o nome do modo ou n√∫mero (1-6): ").strip().lower()
                    
                    # Permite escolha por n√∫mero ou nome
                    if escolha.isdigit():
                        idx = int(escolha) - 1
                        if 0 <= idx < len(configurador.MODOS):
                            modo_escolhido = list(configurador.MODOS.keys())[idx]
                        else:
                            print("   ‚ùå N√∫mero inv√°lido!")
                            continue
                    else:
                        # Procura por nome (permite nomes parciais)
                        modo_escolhido = None
                        for modo in configurador.MODOS.keys():
                            if escolha in modo.lower() or escolha.replace(' ', '_') == modo:
                                modo_escolhido = modo
                                break
                        
                        if modo_escolhido is None:
                            print("   ‚ùå Modo n√£o encontrado!")
                            continue
                    
                    if configurador.configurar_modo(modo_escolhido):
                        print(f"\n‚úÖ Modo '{modo_escolhido.replace('_', ' ').title()}' configurado com sucesso!")
                    else:
                        print(f"\n‚ùå Falha ao configurar modo '{modo_escolhido}'")
                        
                except ValueError:
                    print("   ‚ùå Entrada inv√°lida!")
                except KeyboardInterrupt:
                    print("\n   Opera√ß√£o cancelada pelo usu√°rio")
            
            elif opcao == "4":
                configurador.verificar_configuracao_atual()
            
            elif opcao == "5":
                configurador.testar_logica_interna()
            
            elif opcao == "6":
                if configurador.desativar_logica_interna():
                    print("\n‚úÖ L√≥gica interna desativada com sucesso!")
                else:
                    print("\n‚ùå Falha ao desativar l√≥gica interna")
            
            elif opcao == "7":
                arquivo_backup = configurador.backup_configuracao()
                if arquivo_backup:
                    print(f"\nüíæ Backup criado: {arquivo_backup}")
            
            elif opcao == "8":
                import glob
                arquivos_backup = glob.glob("backup_25iob16_*.json")
                
                if not arquivos_backup:
                    print("\n‚ùå Nenhum arquivo de backup encontrado")
                else:
                    print("\nüìÅ ARQUIVOS DE BACKUP DISPON√çVEIS:")
                    for i, arquivo in enumerate(arquivos_backup, 1):
                        print(f"   {i}. {arquivo}")
                    
                    try:
                        escolha = input("\nEscolha o n√∫mero do backup ou digite o nome: ").strip()
                        
                        if escolha.isdigit():
                            idx = int(escolha) - 1
                            if 0 <= idx < len(arquivos_backup):
                                arquivo_escolhido = arquivos_backup[idx]
                            else:
                                print("   ‚ùå N√∫mero inv√°lido!")
                                continue
                        else:
                            arquivo_escolhido = escolha
                        
                        if configurador.restaurar_configuracao(arquivo_escolhido):
                            print("\nüîÑ Configura√ß√£o restaurada!")
                    
                    except ValueError:
                        print("   ‚ùå Entrada inv√°lida!")
                    except KeyboardInterrupt:
                        print("\n   Opera√ß√£o cancelada pelo usu√°rio")
            
            elif opcao == "0":
                print("\nüëã Saindo...")
                break
            
            else:
                print("\n‚ùå Op√ß√£o inv√°lida! Digite um n√∫mero de 0 a 8.")
            
            input("\n‚è∏Ô∏è  Pressione Enter para continuar...")
        
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
    finally:
        configurador.desconectar()
        print("\nüîå Conex√£o fechada")

if __name__ == "__main__":
    main()
